import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';

/**
 * Recursively walk a directory and return absolute file paths.
 */
async function walkFiles(dir) {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  const files = await Promise.all(
    entries.map((entry) => {
      const res = path.resolve(dir, entry.name);
      return entry.isDirectory() ? walkFiles(res) : res;
    })
  );
  return files.flat();
}

/**
 * Replace {{projectName}} placeholder in all markdown files inside dir.
 */
async function substitutePlaceholders(dir, projectName) {
  const files = await walkFiles(dir);
  const mdFiles = files.filter((f) => f.endsWith('.md'));
  await Promise.all(
    mdFiles.map(async (file) => {
      const content = await fs.readFile(file, 'utf8');
      const updated = content.replace(/\{\{projectName\}\}/g, projectName);
      await fs.writeFile(file, updated);
    })
  );
}

export async function scaffold(projectArg, options) {
  const { overwrite, dryRun, cursor, templateDir: templateDirFlag, skipTemplates = false, placeholderName } = options;

  const inPlace = projectArg === '.' || projectArg === './';
  const destDir = inPlace ? process.cwd() : path.resolve(process.cwd(), projectArg);

  // Name to inject into markdown placeholders & cursor file
  const projectNameForDocs = placeholderName || (inPlace ? path.basename(destDir) : projectArg);

  const operations = [];

  if (!inPlace) {
    const exists = await fs.pathExists(destDir);
    if (exists && !overwrite) {
      throw new Error(`Directory '${projectArg}' already exists. Use --overwrite to override.`);
    }

    if (!dryRun) {
      if (exists && overwrite) {
        operations.push(`Deleting existing directory ${projectArg}`);
        await fs.remove(destDir);
      }
      operations.push(`Creating directory ${projectArg}`);
      await fs.mkdirp(destDir);
    } else {
      operations.push(`[dry-run] Would create directory ${projectArg}`);
    }
  } else {
    operations.push(`Using current directory: ${destDir}`);
  }

  // Resolve template directory
  const defaultTemplateRoot = path.resolve(path.dirname(fileURLToPath(import.meta.url)), '..', 'templates');
  const templateRoot = templateDirFlag ? path.resolve(templateDirFlag) : defaultTemplateRoot;
  const docsSrc = path.join(templateRoot, 'v-docs');
  const docsDest = path.join(destDir, 'v-docs');

  if (!dryRun) {
    await fs.mkdirp(docsDest);
    if (!skipTemplates) {
      operations.push(`Copying docs templates to ${inPlace ? '.' : projectArg}/v-docs`);
      await fs.copy(docsSrc, docsDest);
      await substitutePlaceholders(docsDest, projectNameForDocs);
    } else {
      operations.push('Created empty v-docs directory (skipped templates)');
    }
  } else {
    const msg = !skipTemplates ? `[dry-run] Would copy templates from ${docsSrc} to ${docsDest}` : `[dry-run] Would create empty directory ${docsDest}`;
    operations.push(msg);
  }

  // Root README (only create if we created a new project dir)
  if (!inPlace) {
    const readmePath = path.join(destDir, 'README.md');
    const readmeContent = `# ${projectNameForDocs}\n\nThis project was bootstrapped with lets-vibe.\n\nDocumentation lives in ./v-docs.\n`;
    if (!dryRun) {
      await fs.writeFile(readmePath, readmeContent);
      operations.push('Created README.md');
    } else {
      operations.push('[dry-run] Would create README.md');
    }
  }

  // Cursor config
  if (cursor) {
    const cursorPath = path.join(destDir, '.cursor.json');
    const cursorPayload = {
      title: projectNameForDocs,
      description: 'Generated by lets-vibe to help AI context indexing.',
      include: ['v-docs'],
      ignore: ['node_modules', '.git']
    };
    if (!dryRun) {
      await fs.writeJSON(cursorPath, cursorPayload, { spaces: 2 });
      operations.push('Created .cursor.json');
    } else {
      operations.push('[dry-run] Would create .cursor.json');
    }
  }

  // Output operations summary
  console.log(chalk.cyan('\nOperations:'));
  operations.forEach((op) => console.log('  - ' + op));
  console.log();
} 